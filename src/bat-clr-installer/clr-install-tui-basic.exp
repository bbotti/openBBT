#!/usr/bin/expect -f
# Updated for clr-installer release 1.2.0
# - Disk selection UI changed considerably
#
# This Expect script was generated by autoexpect on Tue Dec  4 23:31:43 2018
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout 3
# set env(https_proxy) <set proxy here, if necessary, and uncomment>
spawn clr-installer
match_max 100000
# Find no media on the main tab of start screen
expect {
    -re ".*No -media- selected.*Use.*navigate" {
        # We should default to highlighting the media config
        sleep 1
        send -- "\r"
    }
    timeout { exit 1 }
}
# Select the only safe target (first one)
expect {
    -re ".*Select Installation Media.*Use.*navigate" {
        sleep 1
        # Tab to next Radio button: Destructive Install
        send -- "\t"
        sleep 1
        # Tab to next Radio button: Modify Disk Partitions
        send -- "\t"
        sleep 1
        # Tab to select the install media : No arrows, stay on first (only)
        #send -- "\t"
        #sleep 1
        # Tab to CheckBox: Encryption
        send -- "\t"
        sleep 1
        # Tab to Cancel Button
        send -- "\t"
        sleep 1
        # Tab to Confirm Button
        send -- "\t"
        sleep 1
        # Select Confirm Button
        send -- "\r"
    }
    timeout { exit 2 }
}
# Back to main scren
# Telemetry hightlighted
expect {
    -re ".*Telemetry.*" {
                sleep 1
                send -- "\r"
        }
        timeout { exit 1 }
}
# Telemetry screen
expect {
    -re ".*Enable Telemetry.*" {
                sleep 1
                send -- "\r"
        }
        timeout { exit 1 }
}
# Install button should be active and highlighted
expect {
    -re ".*________.*Install.*" {
        sleep 1
        send -- "\r"
    }
    timeout { exit 5 }
}
# Increase the timeout for network testing/validation
set timeout 120
# Confirm Install popup
expect {
    -re ".*Confirm.*Installation.*Confirm.*Install.*" {
        sleep 1
        send -- "\t"
        sleep 1
        send -- "\r"
    }
    timeout { exit 6 }
}
# Increase the timeout for actual installation
set timeout 300
# Wait for the install to finish
expect {
    -re ".*Installation comp.*Exit.*" {
        sleep 1
        send -- "\t"
        sleep 1
        send -- "\r"
    }
    timeout { exit 7 }
}
expect eof
